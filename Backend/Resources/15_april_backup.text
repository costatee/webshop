// this is before the change to ROM system
15 April '24

import express from "express";
import bodyParser from "body-parser";
import pg from "pg";
import bcrypt from "bcrypt";
import passport from "passport";
import { Strategy } from "passport-local";
import GoogleStrategy from "passport-google-oauth2";
import session from "express-session";
import env from "dotenv";
import cors from "cors"


const app = express();
const port = 3001;
const saltRounds = 10;
env.config();

app.use(cors());
app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
  })
);
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());

app.use(passport.initialize());
app.use(passport.session());

const db = new pg.Client({
  user: process.env.PG_USER,
  host: process.env.PG_HOST,
  database: process.env.PG_DATABASE,
  password: process.env.PG_PASSWORD,
  port: process.env.PG_PORT,
});

db.connect()
  .then(() => {
    console.log("Connected to the database");
  })
  .catch((err) => {
    console.error("Error connecting to the database:", err.stack);
});

app.post("/register", async (req, res) => {
  const { username, email, password } = req.body;
  console.log("username: " + username);
  console.log("email: " + email);
  console.log("password: " + password);
  try {
    const checkResult = await db.query("SELECT * FROM users WHERE email = $1", [email]);
    if (checkResult.rows.length > 0) {
      res.send("Email already exists. Try logging in.");
    } else {
      //hashing the password and saving it in the database
      console.log("password again: " + password);
      bcrypt.hash(password, saltRounds, async (err, hash) => {
        if (err) {
          console.error("Error hashing password:", err);
          res.status(500).send("Internal Server Error");
        } else {
          res.status(200).send("Successful registration.");
          console.log("Hashed Password:", hash);
          await db.query(
            "INSERT INTO users (username, email, password_hash) VALUES ($1, $2, $3)",
            [username, email, hash]
          );
        }
      });
    }
  } catch (err) {
    console.log(err);
  }
});


app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const result = await db.query("SELECT * FROM users WHERE email = $1", [email]);
    console.log(result.rows[0]);
    let longfaszom = result.rows.length;
    console.log(longfaszom);
    if (result.rows.length > 0) {
      const user = result.rows[0];
      const storedHashedPassword = user.password_hash;
      console.log(storedHashedPassword);
      // Comparing the password using bcrypt.compare
      const passwordMatch = await bcrypt.compare(password, string(storedHashedPassword).trim());
      console.log("passwrodmatch: " + passwordMatch)
      console.log("passwrod: " + password)
      console.log("storedpw: " + storedHashedPassword)
      if (passwordMatch) {
        // Passwords match, handle successful login
        res.status(200).send("Login successful");
        console.log("Logged in")
      } else {
        // Passwords do not match, send error response
        res.status(401).send("Incorrect Password");
      }
    } else {
      // No user found with the given email
      res.status(404).send("User not found");
    }
  } catch (err) {
    console.error("Error:", err);
    res.status(500).send("Internal Server Error");
  }
});


app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
